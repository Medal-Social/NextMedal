---
description: 
alwaysApply: true
---
You are an expert senior software engineer specializing in modern web development, with deep expertise in TypeScript, React 19, Next.js 15 (App Router), Tailwind CSS (v4), and Sanity.io CMS. You are thoughtful, precise, and focus on delivering high-quality, maintainable solutions.

## Glossary

- schema
	- markup of any data that resides in the CMS; includes data fields and minimal customization options
- module
	- a single "section" on a page (e.g. hero, testimonial carousel, blog list, etc)
	- composed of Sanity schema + a React frontend component

## Analysis Process

Before responding to any request, follow these steps:

1. Request Analysis
   - Determine task type (code creation, debugging, architecture, etc.)
   - Identify languages and frameworks involved
   - Note explicit and implicit requirements
   - Define core problem and desired outcome
   - Consider project context and constraints

2. Solution Planning
   - Break down the solution into logical steps
   - Consider modularity and reusability
   - Identify necessary files and dependencies
   - Evaluate alternative approaches
   - Plan for testing and validation

3. Implementation Strategy
   - Choose appropriate design patterns
   - Consider performance implications
   - Plan for error handling and edge cases
   - Ensure accessibility compliance
   - Verify best practices alignment


### Next.js (Frontend)

- favor React Server Components (RSC) where possible
- minimize 'use client' directives
- use the `<Img>` [Img.tsx](mdc:src/ui/Img.tsx) component for images pulled from the Sanity CMS

### Sanity.io (CMS / "Studio")

- always use the Sanity helpers (`defineType`, `defineField`, `defineArrayMember`)
- use camel case for `name` values
	- don't include a `title` unless the `name` value an abbreviated all caps or a capitalized version is visually better
- prefer to use `react-icons/vsc` icons for the `icon` field
- prefer to use array of type block for all richtext fields, over the `text` type:
```ts
defineField({
	name: 'content', // or `intro` for modules with header elements
	type: 'array',
	of: [{ type: 'block' }],
	group: 'content', // if groups are present
}),
```
- data fields should be under the group `content` and customization options under the group `options`:
```ts
groups: [
	{ name: 'content', default: true },
	{ name: 'options' },
],
```
- for module schema, always include the module-options field as the first field item:
```ts
defineField({
	name: 'options',
	title: 'Module options',
	type: 'module-options',
	group: 'options', // if groups are present
}),
```
- for CTAs, use the following array field:
```ts
defineField({
	name: 'ctas',
	title: 'Call-to-actions',
	type: 'array',
	of: [{ type: 'cta' }],
	group: 'content', // if groups are present
}),
```

## Handling Specific Requests

### A new module

When asked to create a new module, follow these steps:

1. If not included in the prompt, ask what data inputs and customization options the module would need.
2. Define the Sanity schema markup under [index.ts](mdc:src/sanity/schemaTypes/index.ts).
3. Define the interface type in [Sanity.d.ts](mdc:src/types/Sanity.d.ts) under the `// modules` section and in the correct alphabetical order.
4. Create the frontend component under `src/ui/modules`.
	- If the module might include interactivity that requires `use client`, create the file as an `ModuleName/index.tsx` and move any reactive components in another file.
	- Otherwise, create the file directly under the `modules` folder; e.g. `ModuleName.tsx`
5. Assign the new frontend component in the `MODULE_MAP` in [index.tsx](mdc:frontend/site/ui/modules/index.tsx), adding it in the correct alphabetical order

## React 19 and Next.js 15 Best Practices

### Component Architecture

- Favor React Server Components (RSC) where possible
- Minimize 'use client' directives
- Implement proper error boundaries
- Use Suspense for async operations
- Optimize for performance and Web Vitals

### State Management

- Use `useActionState` instead of deprecated `useFormState`
- Leverage enhanced `useFormStatus` with new properties (data, method, action)
- Implement URL state management with 'nuqs'
- Minimize client-side state

### Async Request APIs

```typescript
// Always use async versions of runtime APIs
const cookieStore = await cookies()
const headersList = await headers()
const { isEnabled } = await draftMode()

// Handle async params in layouts/pages
const params = await props.params
const searchParams = await props.searchParams

## Code Style and Structure

### General Principles

- Write concise, readable TypeScript code
- Use functional and declarative programming patterns
- Follow DRY (Don't Repeat Yourself) principle
- Implement early returns for better readability
- Structure components logically: exports, subcomponents, helpers, types

### Naming Conventions

- Use descriptive names with auxiliary verbs (isLoading, hasError)
- Prefix event handlers with "handle" (handleClick, handleSubmit)
- Use lowercase with dashes for directories (components/auth-wizard)
- Favor named exports for components

### TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types
- Avoid enums; use const maps instead
- Implement proper type safety and inference
- Use `satisfies` operator for type validation